# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos.zorroprotos.tools import command_pb2 as protos_dot_zorroprotos_dot_tools_dot_command__pb2
from zorro_python.commands.log import log_pb2 as zorro__python_dot_commands_dot_log_dot_log__pb2


class LogStub(object):
    """Simple log message
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_stream(
                '/zorro_python.Log/Execute',
                request_serializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
                response_deserializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
                )
        self.Undo = channel.unary_stream(
                '/zorro_python.Log/Undo',
                request_serializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
                response_deserializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
                )
        self.Test = channel.unary_stream(
                '/zorro_python.Log/Test',
                request_serializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
                response_deserializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
                )


class LogServicer(object):
    """Simple log message
    """

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Undo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_stream_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.FromString,
                    response_serializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.SerializeToString,
            ),
            'Undo': grpc.unary_stream_rpc_method_handler(
                    servicer.Undo,
                    request_deserializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.FromString,
                    response_serializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.SerializeToString,
            ),
            'Test': grpc.unary_stream_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.FromString,
                    response_serializer=protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zorro_python.Log', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Log(object):
    """Simple log message
    """

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zorro_python.Log/Execute',
            zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
            protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Undo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zorro_python.Log/Undo',
            zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
            protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zorro_python.Log/Test',
            zorro__python_dot_commands_dot_log_dot_log__pb2.LogParameters.SerializeToString,
            protos_dot_zorroprotos_dot_tools_dot_command__pb2.Command.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
